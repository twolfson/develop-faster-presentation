#!/usr/bin/env node

// TODO: In theory, this entire bin script can become its own node module

// Create a leveldb instance
var fs = require('fs');
var levelup = require('levelup');
try { fs.mkdirSync(__dirname + '/../tmp'); } catch (e) {}
var db = levelup(__dirname + '/../tmp/develop-faster.db');

// Set up CLI options
var assert = require('assert');
var program = require('commander')
                .version(require('../package.json').version);

// Define common slide jumping function
function goToSlide(_slide, argv) {
  // Parse the slide and guarantee it is within our bounds
  slide = parseInt(_slide, 10);
  assert(!isNaN(slide), 'Slide "' + _slide + '" parsed to NaN');
  slide = Math.max(0, slide);
  // TODO: Get slides.length
  slide = Math.min(slide, 10);
  // TODO: Load up slide
  // TODO: Consider outputting slide 3/10
  // TODO: Maybe that is `status` command
  // TODO: Save new state

  // TODO: Stop doing this
  var slideJs = require('../lib/slides/title.js');
  slideJs();
}

// TODO: Definitely display same slide when no command is provided

// Define CLI commands
// TODO: Consider command `slides` which reads json-content-demuxed info for each slide
program
  .command('slide <slide>')
  .description('Jump to a specific slide')
  .action(goToSlide);

program
  .command('first')
  .description('Go back to the beginning')
  .action(function () {
    goToSlide(0);
  });

program
  .command('last')
  .description('Jump to the final slide')
  .action(function () {
    // TODO: Grab all slides and move to the last one
    // goToSlide(0);
  });

program
  .command('next')
  .description('Move following by one slide')
  .action(function () {
    // TODO: Grab state
    // TODO: Maybe manage state via a class with a namespace for this path?
    // TODO: Or that leveldb magic...
  });

program
  .command('back')
  .description('Move to the previous slide')
  .action(function () {
    // TODO: Follow similar approach as `next`
  });

// Parse the arguments
program.parse(process.argv);

// TODO: State will be managed by global environment variable or ~/.develop-faster-state?
// TODO: Maybe leveldb?

// TODO: Fix `git push --set-upstream origin master` on `git-release`


// Proposed structure:

// bin will manage state and determine slide to load
// lib will have export that loads a specific slide
// lib/slides will contain each slide
