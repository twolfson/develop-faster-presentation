#!/usr/bin/env node

// TODO: In theory, this entire bin script can become its own node module

// Create a leveldb instance
var fs = require('fs');
var levelup = require('levelup');
try { fs.mkdirSync(__dirname + '/../tmp'); } catch (e) {}
var db = levelup(__dirname + '/../tmp/develop-faster.db');

// Set up CLI options
var assert = require('assert');
var async = require('async');
var program = require('commander')
                .version(require('../package.json').version);

// Load in presentation info
// TODO: This should sniff for `presentation/config.{yml,json,js}`, `config.{yml,json,js}`
// TODO: Easily done via `require` but the `fs.existsSync` is excess I don't want to deal with right now
// TODO: Allow override via `--config`
var yaml = require('yaml');
var config = require('../presentation/config.yml');
var Presentation = require('../');
var presentation = new Presentation(config, {cwd: __dirname + '../presentation'});

// Define common slide jumping function
function goToSlide(_slide, argv) {
  // TODO: Load slides
  var slides, slide;
  async.series([
    function fallbackSlide (cb) {
      // Fallback slide to active one
      if (_slide === undefined) {
        db.get('slide', function (err, val) {
          // If this is the first run, show the first slide
          if (err && err.notFound) {
            _slide = 0;
            cb();
          } else {
          // Otherwise, save the info and callback
            _slide = val || 0;
            cb(err);
          }
        });
      } else {
        cb();
      }
    },
    function coerceSlide (cb) {
      // Parse the slide and guarantee it is within our bounds
      slide = parseInt(_slide, 10);
      assert(!isNaN(slide), 'Slide "' + _slide + '" parsed to NaN');
      slide = Math.max(0, slide);
      slide = Math.min(slide, 10);
      cb();
    },
    function loadSlide (cb) {
      // TODO: Stop doing this
      var slideJs = require('../lib/slides/title.js');
      slideJs();
    },
    function saveState (cb) {
      // Save the slide state
      db.set('slide', slide, cb);
    }
  ], function (err) {
    // If there was an error, throw it
    if (err) {
      throw err;
    }
  });
}

// TODO: Consider a `status` command which outputs current slide

// TODO: Definitely display same slide when no command is provided

// Define CLI commands
// TODO: Consider command `slides` which reads json-content-demuxed info for each slide
program
  .command('slide <slide>')
  .description('Jump to a specific slide')
  .action(goToSlide);

program
  .command('first')
  .description('Go back to the beginning')
  .action(function () {
    goToSlide(0);
  });

program
  .command('last')
  .description('Jump to the final slide')
  .action(function () {
    // TODO: Grab all slides and move to the last one
    // goToSlide(0);
  });

program
  .command('next')
  .description('Move following by one slide')
  .action(function () {
    // TODO: Grab state
    // TODO: Maybe manage state via a class with a namespace for this path?
    // TODO: Or that leveldb magic...
  });

program
  .command('back')
  .description('Move to the previous slide')
  .action(function () {
    // TODO: Follow similar approach as `next`
  });

// Parse the arguments
program.parse(process.argv);

// If there was no command, re-run the current slide
if (process.argv.length === 2) {
  goToSlide();
}

// TODO: State will be managed by global environment variable or ~/.develop-faster-state?
// TODO: Maybe leveldb?

// TODO: Fix `git push --set-upstream origin master` on `git-release`


// Proposed structure:

// bin will manage state and determine slide to load
// lib will have export that loads a specific slide
// lib/slides will contain each slide
